{"version":3,"sources":["Routes/home/home.js","Routes/projects/projects.js","Routes/interests/interests.js","Components/app/app.js","serviceWorker.js","index.js"],"names":["Home","Alert","variant","Projects","hoverProject","e","currentTarget","getElementsByTagName","style","opacity","getElementsByClassName","resetHoverProject","projects","map","project","index","className","onMouseOver","onMouseLeave","minHeight","liveUrl","href","class","icon","faGlobeAmericas","codeUrl","border","faGithub","src","process","thumbnailSrc","alt","name","description","technologies","technology","OverlayTrigger","placement","overlay","Tooltip","logoSrc","width","height","Interests","App","basename","Navbar","bg","Brand","as","Link","to","Nav","NavLink","exact","Container","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"i+FAGe,SAASA,IACtB,OAAO,kBAACC,EAAA,EAAD,CAAOC,QAAQ,WAAf,Q,oECKM,SAASC,IACtB,SAASC,EAAaC,GACpBA,EAAEC,cAAcC,qBAAqB,OAAO,GAAGC,MAAMC,QAAU,GAC/DJ,EAAEC,cAAcI,uBAAuB,gBAAgB,GAAGF,MAAMC,QAAU,EAG5E,SAASE,EAAkBN,GACzBA,EAAEC,cAAcC,qBAAqB,OAAO,GAAGC,MAAMC,QAAU,EAC/DJ,EAAEC,cAAcI,uBAAuB,gBAAgB,GAAGF,MAAMC,QAAU,EAG5E,OACE,6BACGG,EAASC,KAAI,SAACC,EAASC,GAAV,OACZ,yBACEC,UAAU,YACVC,YAAab,EACbc,aAAcP,GAEd,yBAAKK,UAAU,kBACb,yBACEA,UAAU,2BACVR,MAAO,CACLW,UAAW,UAGb,yBAAKH,UAAU,4CACb,yBAAKA,UAAU,wCACZF,EAAQM,QACP,uBAAGC,KAAMP,EAAQM,QAASE,MAAM,wBAC9B,kBAAC,IAAD,CACEC,KAAMC,IACNR,UAAU,SAHd,iBAQA,+BAEDF,EAAQW,QACP,uBACEJ,KAAMP,EAAQW,QACdH,MAAM,qBACNd,MAAO,CAAEkB,OAAQ,wBAEjB,kBAAC,IAAD,CAAiBH,KAAMI,IAAUX,UAAU,SAL7C,oBASA,iCAIN,yBACEY,IACEC,kCAEAf,EAAQgB,aAEVC,IAAKjB,EAAQkB,KAAO,gBAGxB,yBAAKhB,UAAU,UACb,yBAAKA,UAAU,aACb,wBAAIA,UAAU,cAAcF,EAAQkB,MACpC,uBAAGhB,UAAU,aAAaF,EAAQmB,aACjCnB,EAAQoB,aAAarB,KAAI,SAACsB,GAAD,OACxBD,EAAaC,GACX,kBAACC,EAAA,EAAD,CACEC,UAAU,MACVC,QACE,kBAACC,EAAA,EAAD,KAAUL,EAAaC,GAAYH,OAGrC,yBACEJ,IACEC,iCAEAK,EAAaC,GAAYK,QAE3BT,IAAKG,EAAaC,GAAYH,KAAO,QACrCxB,MAAO,CAAEiC,MAAO,OAAQC,OAAQ,WAIpC,0CC3FL,SAASC,IACtB,OAAO,kBAAC1C,EAAA,EAAD,CAAOC,QAAQ,QAAf,aCSM,SAAS0C,IACtB,OACE,kBAAC,IAAD,CAAQC,SAAS,cACf,kBAACC,EAAA,EAAD,CAAQC,GAAG,OAAO7C,QAAQ,QACxB,kBAAC4C,EAAA,EAAOE,MAAR,CAAcC,GAAIC,IAAMC,GAAG,KAA3B,aAGA,kBAACC,EAAA,EAAD,CAAKpC,UAAU,WACb,kBAACoC,EAAA,EAAIF,KAAL,CAAUD,GAAII,IAASC,OAAK,EAACH,GAAG,KAAhC,QAGA,kBAACC,EAAA,EAAIF,KAAL,CAAUD,GAAII,IAASF,GAAG,aAA1B,YAGA,kBAACC,EAAA,EAAIF,KAAL,CAAUD,GAAII,IAASF,GAAG,cAA1B,eAKJ,kBAACI,EAAA,EAAD,CAAWvC,UAAU,QACnB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOsC,OAAK,EAACE,KAAK,KAChB,kBAACxD,EAAD,OAEF,kBAAC,IAAD,CAAOwD,KAAK,aACV,kBAACrD,EAAD,OAEF,kBAAC,IAAD,CAAOqD,KAAK,cACV,kBAACb,EAAD,UC7BQc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCXNC,IAASC,OAAO,kBAACnB,EAAD,MAASoB,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.2c3c936f.chunk.js","sourcesContent":["import React from 'react'\nimport { Alert } from 'react-bootstrap'\n\nexport default function Home() {\n  return <Alert variant=\"success\">Home</Alert>\n}\n","import React from 'react'\nimport projects from 'Data/projects.json'\nimport technologies from 'Data/technologies.json'\nimport { OverlayTrigger, Tooltip } from 'react-bootstrap'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faGlobeAmericas } from '@fortawesome/free-solid-svg-icons'\nimport './projects.css'\nimport { faGithub } from '@fortawesome/free-brands-svg-icons'\n\nexport default function Projects() {\n  function hoverProject(e) {\n    e.currentTarget.getElementsByTagName('img')[0].style.opacity = 0.4\n    e.currentTarget.getElementsByClassName('urls-buttons')[0].style.opacity = 1\n  }\n\n  function resetHoverProject(e) {\n    e.currentTarget.getElementsByTagName('img')[0].style.opacity = 1\n    e.currentTarget.getElementsByClassName('urls-buttons')[0].style.opacity = 0\n  }\n\n  return (\n    <div>\n      {projects.map((project, index) => (\n        <div\n          className=\"card mb-3\"\n          onMouseOver={hoverProject}\n          onMouseLeave={resetHoverProject}\n        >\n          <div className=\"row no-gutters\">\n            <div\n              className=\"col-lg-5 image-container\"\n              style={{\n                minHeight: '200px',\n              }}\n            >\n              <div className=\"row h-100 center-vertically urls-buttons\">\n                <div className=\"col-sm center-vertically text-center\">\n                  {project.liveUrl ? (\n                    <a href={project.liveUrl} class=\"btn btn-primary mr-1\">\n                      <FontAwesomeIcon\n                        icon={faGlobeAmericas}\n                        className=\"mr-1\"\n                      />\n                      Visit Website\n                    </a>\n                  ) : (\n                    <span />\n                  )}\n                  {project.codeUrl ? (\n                    <a\n                      href={project.codeUrl}\n                      class=\"btn btn-light ml-1\"\n                      style={{ border: '1px solid lightgray' }}\n                    >\n                      <FontAwesomeIcon icon={faGithub} className=\"mr-1\" />\n                      View Source Code\n                    </a>\n                  ) : (\n                    <span />\n                  )}\n                </div>\n              </div>\n              <img\n                src={\n                  process.env.PUBLIC_URL +\n                  '/projects_thumbnails/' +\n                  project.thumbnailSrc\n                }\n                alt={project.name + ' thumbnail'}\n              />\n            </div>\n            <div className=\"col-sm\">\n              <div className=\"card-body\">\n                <h5 className=\"card-title\">{project.name}</h5>\n                <p className=\"card-text\">{project.description}</p>\n                {project.technologies.map((technology) =>\n                  technologies[technology] ? (\n                    <OverlayTrigger\n                      placement=\"top\"\n                      overlay={\n                        <Tooltip>{technologies[technology].name}</Tooltip>\n                      }\n                    >\n                      <img\n                        src={\n                          process.env.PUBLIC_URL +\n                          '/technologies_logos/' +\n                          technologies[technology].logoSrc\n                        }\n                        alt={technologies[technology].name + ' logo'}\n                        style={{ width: '56px', height: '56px' }}\n                      />\n                    </OverlayTrigger>\n                  ) : (\n                    <span />\n                  )\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      ))}\n    </div>\n  )\n}\n","import React from 'react'\nimport { Alert } from 'react-bootstrap'\n\nexport default function Interests() {\n  return <Alert variant=\"info\">Interests</Alert>\n}\n","import React from 'react'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  NavLink,\n  Link,\n} from 'react-router-dom'\nimport { Navbar, Nav, Container } from 'react-bootstrap'\nimport Home from 'Routes/home'\nimport Projects from 'Routes/projects'\nimport Interests from 'Routes/interests'\n\nexport default function App() {\n  return (\n    <Router basename=\"/portfolio\">\n      <Navbar bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand as={Link} to=\"/\">\n          Portfolio\n        </Navbar.Brand>\n        <Nav className=\"mr-auto\">\n          <Nav.Link as={NavLink} exact to=\"/\">\n            Home\n          </Nav.Link>\n          <Nav.Link as={NavLink} to=\"/projects\">\n            Projects\n          </Nav.Link>\n          <Nav.Link as={NavLink} to=\"/interests\">\n            Interests\n          </Nav.Link>\n        </Nav>\n      </Navbar>\n      <Container className=\"mt-4\">\n        <Switch>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n          <Route path=\"/projects\">\n            <Projects />\n          </Route>\n          <Route path=\"/interests\">\n            <Interests />\n          </Route>\n        </Switch>\n      </Container>\n    </Router>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from 'Components/app'\nimport * as serviceWorker from './serviceWorker'\nimport 'Styles/index.css'\nimport 'Styles/bootstrap.scss'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}